package main

import (
	"strings"
	"text/template"
)

func typefor(sfdctype string) string {
	if len(sfdctype) == 0 {
		return "interface{}"
	}
	switch strings.ToLower(sfdctype) {
	case "address":
		return "*Address"
	case "boolean":
		return "bool"
	case
		"calculated",
		"combobox",
		"date",
		"datetime",
		"encryptedstring",
		"id",
		"masterrecord",
		"multipicklist",
		"phone",
		"picklist",
		"reference",
		"string",
		"textarea",
		"time",
		"url":
		return "string"
	case
		"currency",
		"double",
		"percent":
		return "float64"
	case "int":
		return "int"
	case
		"email",
		"junctionidlist":
		return "[]string"
	case "location":
		return "*Geolocation"
	}

	return "interface{}"
}

func cleanname(name string) string {
	name = strings.Replace(name, "__c", "", -1)
	if strings.Contains(name, "_") {
		newName := ""
		splitName := strings.Split(name, "_")
		for _, item := range splitName {
			if len(item) == 0 {
				continue
			}
			if len(item) == 1 {
				newName += strings.ToUpper(item)
				continue
			}
			if len(item) == 2 {
				if strings.ToUpper(item) == "ID" {
					newName += strings.ToUpper(item)
					continue
				}
			}
			newName += strings.ToUpper(string(item[0])) + string(item[1:])
		}
		name = newName
	}

	if strings.HasSuffix(name, "Id") {
		name = strings.TrimRight(name, "Id") + "ID"
	}
	return name
}

func jsontag(tagName string) string {
	return "`json:\"" + tagName + "\"`"
}

var generatedTmpl = template.Must(template.New("generated").Funcs(template.FuncMap{
	"jsontag":   jsontag,
	"cleanname": cleanname,
	"typefor":   typefor,
}).Parse(`
// generated by sfdc; DO NOT EDIT

package {{.PackageName}}

// {{cleanname .SObject.Name}} is the {{.SObject.Label}} SObject
type {{cleanname .SObject.Name}} struct {
  {{range .SObjectDescription.Fields}}{{cleanname .Name}} {{typefor .Type}} {{jsontag .Name}} // {{.Type}}
  {{end}}
}

type {{cleanname .SObject.Name}}QueryResponse struct {
	Done           bool                          {{jsontag "done"}}
  NextRecordsURL string                        {{jsontag "nextRecordsUrl"}}
	Records        []{{cleanname .SObject.Name}} {{jsontag "records"}}
	TotalSize      int                           {{jsontag "totalSize"}}
}
`))

var commonTmpl = template.Must(template.New("common").Parse(`
// generated by sfdc; DO NOT EDIT

import "net/url"

package {{.PackageName}}

// Address is a compound data type that contains address field data
type Address struct {
  Accuracy string
  City string
  Country string
  CountryCode string
  Latitude string
  Longitude string
  PostalCode string
  State string
  StateCode string
  Street string
}

// Geolocation is a compound data type that contains latitude and logitude
// values for geolocation fields
type Geolocation struct {
  Latitude string
  Logitude string
}

type Forcer interface {
	func Delete(path string, params url.Values) error
	func Get(path string, params url.Values, out interface{}) error
	func Post(path string, params url.Values, payload, out interface{}) error
	func Patch(path string, params url.Values, payload, out interface{}) error
	func Put(path string, params url.Values, payload, out interface{}) error
	func Query(query string, out interface{}) error
	func QueryAll(query string, out interface{}) error
	func QueryNext(uri string, out interface{}) error
}
`))
